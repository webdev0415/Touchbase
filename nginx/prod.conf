user  nginx;
worker_processes  1;

events {
  worker_connections  1024;
}

##### DEPLOYMENT: NOTE: TODO:
# One server for NGINX, frontend, and backend, NO docker
# backend is run in gunicorn, convert the backend dockerfile to bash script
# backend app accessible at specific port. Nginx serves frontend static files
# backend configured to ONLY accept requests from nginx frontend/localhost. 

http {
  include /etc/nginx/mime.types;
  client_max_body_size 100m;

  # NOTE: in prod, nginx only serves the frontend and backend is not accessible
  upstream backend {
    server backend:8000;
  }

  server {
    listen 80;
    charset utf-8;

    root /dist/;
    index index.html;

    # frontend
    location / {
      try_files $uri $uri/ @rewrites;
    }

    location @rewrites {
      rewrite ^(.+)$ /index.html last;
    }

    # NOTE: in prod, nginx only serves the frontend and backend is not accessible
    # backend urls
    location ~ ^/(admin|graphql) {
      proxy_redirect off;
      proxy_pass http://backend;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
    }

    # NOTE: in prod, nginx only serves the frontend and backend is not accessible
    # backend static
    location ~ ^/(staticfiles|media)/(.*)$ {
      alias /$1/$2;
    }

    # NOTE: using CDN, so no static files can be served by nginx
    # NOTE: can try using add_header, x-ip-addr, forwards Ip addr to frontend or something
    # Some basic cache-control for static files to be sent to the browser
    # location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
    #   expires max;
    #   add_header Pragma public;
    #   add_header Cache-Control "public, must-revalidate, proxy-revalidate";
    # }
  }
}